#!/bin/bash

# print-selphy-postcard
# 
# Print postcard-sized (148x100mm, 5.8 x 3.9in) images
# on a Canon Selphy CP1200 and compatible photo printers
#
# Usage: print-selphy-postcard [--border] <file>
#
# This script requires ImageMagick, GNU sed and other text processing
# utilities, and CUPS.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#  
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#  
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Configuration parameters:

# Printer name
# Set Wi-Fi printer name, as seen by CUPS.
#
# Corresponding printer entry in CUPS configuration should be something like:
# dnssd://Canon%20SELPHY%20CP1200._ipp._tcp.local/?uuid=<uuid>
#
# To produce that entry for a new printer, use CUPS printer autodetection
# (usually http://localhost:631 , Administration / Add Printer menu) while
# mDNS service discovery is enabled.
#

usage () {
  echo "Usage: print-selphy-postcard [-b|--border] [-p|--preview] <file>"
}

# Parse command line arguments
imggeom="1760x1190"
crop=true
preview=false

POSITIONAL=()
while [[ $# -gt 0 ]]
do
  key="$1"
  
  case "$key" in
    -b|--border)
      imggeom="1700x1130"
      crop=false
      shift # past argument
      ;;
    -p|--preview)
      preview=true
      shift # past argument
      ;;
    *)    # unknown option
      if [[ "$key" =~ ^- ]]
        then
          >&2 echo "unknown option '$key'"
          usage
          exit 1
        else
          POSITIONAL+=("$key") # save it in an array for later
      fi
      shift # past argument
      ;;
  esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

if [ $# != 1 ]
  then
    >&2 echo "Not the expected number of arguments"
    usage
    exit 1
fi

PRINTER="Canon_SELPHY_CP1200"

# End of configuration parameters.

check=true
for ex in \
 identify convert grep tr head lpq lpr bc display
  do
    loc=`which "${ex}"`
    if [ "${loc}" = "" ]
      then
        >&2 echo "${ex} is missing"
        check=false
    fi
done

if ! ${check}
  then
    >&2 echo "Some utilities are missing"
    exit 1
fi

$preview || lpq -P "${PRINTER}" >/dev/null 2>&1 || {
    >&2 echo "Can't check printer ${PRINTER} status"
    exit 1
}

$preview \
    && FINALCMD="display" \
    || FINALCMD="lpr -o raw -P '${PRINTER}'"
# Print

if ! [ -f "${1}" ]
  then
    >&2 echo "Input file not found"
    exit 1 
fi
if \
echo $(($(identify "${1}" | tr ' ' '\n' | \
          grep '^[0-9]\+x[0-9]\+$' | \
          head -n 1 | tr 'x' '-'))) | \
grep -q - 
  then
    rotateopt="-rotate" 
    rot="90"
  else
    rotateopt=""
    rot=""
fi

if $crop
then
    ratio=$(identify "${1}" | tr ' ' '\n' | \
            grep '^[0-9]\+x[0-9]\+$' | \
            head -n 1 | tr 'x' '/' | bc -l)
    if [ "$(echo "$ratio > 1" | bc -l)" != 0 ]
    then
      ratio=$(echo "1./$ratio" | bc -l)
    fi
    if ! [[ $ratio =~ ^0?\.667 ]]
    then
      echo "Image aspect ratio does not seems to be 2/3."
      while true
      do
        echo -n "Crop, Resize, Abort? "
        read answ
        case ${answ,,} in
          "c"|"crop") break ;;
          "r"|"resize") crop=false; break ;;
          "a"|"abort") exit 1 ;;
          *) echo "Unknown answer" ;;
        esac
      done
    fi
fi
$crop && imggeom="$imggeom^"

convert ${rotateopt} ${rot} -define filter:blur=0.8 \
    -filter Gaussian -resize "${imggeom}" \
    -gravity center -extent "1760x1190" "${1}" png:- \
| convert -page "+46+34" -background white -flatten \
    -extent "1872x1248" png:- -quality 97 jpg:- \
| $FINALCMD

exit 0
